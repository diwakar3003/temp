import rclpy
from rclpy.node import Node
from sensor_msgs.msg import CompressedImage, Image
import cv2
import numpy as np
from cv_bridge import CvBridge

class CompressedToRawConverter(Node):
    def __init__(self):
        super().__init__('compressed_to_raw_converter')

        # Create a subscriber for the compressed image topic
        self.subscription = self.create_subscription(
            CompressedImage,
            '/camera/image/compressed',  # Replace with your compressed image topic
            self.image_callback,
            10
        )

        # Create a publisher for the raw image topic
        self.publisher = self.create_publisher(
            Image,
            '/camera/image/raw',  # Replace with your desired raw image topic
            10
        )

        # Initialize CvBridge for converting between ROS and OpenCV images
        self.bridge = CvBridge()

        self.get_logger().info('Node started, subscribing to compressed image topic...')

    def image_callback(self, msg):
        try:
            # Convert compressed image data to numpy array
            np_arr = np.frombuffer(msg.data, np.uint8)

            # Decode the compressed image to raw (BGR format)
            cv_image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

            if cv_image is None:
                self.get_logger().warn('Failed to decode compressed image')
                return

            # Convert the OpenCV image (BGR) to a ROS Image message
            raw_image_msg = self.bridge.cv2_to_imgmsg(cv_image, encoding='bgr8')

            # Copy header from the compressed image message
            raw_image_msg.header = msg.header

            # Publish the raw image
            self.publisher.publish(raw_image_msg)
            self.get_logger().info(f'Published raw image to /camera/image/raw')

        except Exception as e:
            self.get_logger().error(f'Error processing image: {str(e)}')

def main(args=None):
    rclpy.init(args=args)
    node = CompressedToRawConverter()

    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()