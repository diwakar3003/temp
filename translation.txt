import cv2
import numpy as np

def translate_image(img, future_waypoints, low_x_range=-30, high_x_range=30, low_y_range=-30, high_y_range=30):
    """
    Shifts the image right, left, up, or down. 
    When performing a lateral shift, a delta proportional to the pixel shifts is added to the future waypoints
    """
    rows, cols = img.shape[:2]

    # Randomly choose the direction of the translation (left or right)
    direction = np.random.choice([-1, 1])

    # Randomly choose the amount of translation within the specified range
    translation_x = direction * np.random.randint(low_x_range, high_x_range + 1)
    translation_y = np.random.randint(low_y_range, high_y_range + 1)

    # Update x-coordinates of future waypoints based on the translation
    future_waypoints[:, 0] += translation_x
    # Update y-coordinates of future waypoints based on the translation
    future_waypoints[:, 1] += translation_y

    # Apply translation to the image
    translation_matrix = np.float32([[1, 0, translation_x], [0, 1, translation_y]])
    img_translated = cv2.warpAffine(img, translation_matrix, (cols, rows))

    return img_translated, future_waypoints

# Example usage:
# Load your image and waypoints
input_image = cv2.imread('path_to_your_input_image.jpg')
future_waypoints = np.array([[x1, y1], [x2, y2], ...])  # Replace with your actual waypoints

# Perform translation augmentation
augmented_image, augmented_waypoints = translate_image(input_image, future_waypoints)

# Display the original and augmented images (for visualization purposes)
cv2.imshow('Original Image', input_image)
cv2.imshow('Augmented Image', augmented_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
